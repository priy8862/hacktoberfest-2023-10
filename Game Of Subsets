Elena is the topper of the class. Once her teacher asked her a problem. He gave Elena an array of integers of length n. He calls a subset of array arr good if its product can be represented as a product of one or more distinct prime numbers. He asked her to find the number of different good subsets in arr modulo 109 + 7.

As a good friend of Elena help her to solve the problem.

Example 1:

Input:
N: 4
arr: {1,2,3,4}
Output: 6
Explanation: 
The good subsets are:
- [1,2]: product is 2, which is the product of distinct
prime 2.
- [1,2,3]: product is 6, which is the product of 
distinct primes 2 and 3.
- [1,3]: product is 3, which is the product of distinct
prime 3.
- [2]: product is 2, which is the product of distinct
 prime 2.
- [2,3]: product is 6, which is the product of distinct
primes 2 and 3.
- [3]: product is 3, which is the product of distinct
prime 3.
Example 2:

Input:
N : 3
arr : {2, 2, 3}
Output: 5
Explanantion:
The good subsets are : {2}, {2}, {2, 3}, {2, 3}, {3}




MOD = 10**9 + 7

def is_prime(x):
    if x < 2:
        return False
    for i in range(2, int(x ** 0.5) + 1):
        if x % i == 0:
            return False
    return True

def count_good_subsets(N, arr):
    count = [0] * 10
    for num in arr:
        count[num] += 1

    # Initialize the dp array
    dp = [0] * (N + 1)
    dp[0] = 1

    for i in range(2, 10):
        if is_prime(i):
            for j in range(i, N + 1):
                dp[j] = (dp[j] + dp[j - i]) % MOD

    ans = 1
    ans = (ans * (pow(2, count[1], MOD) - 1 + MOD)) % MOD

    for i in range(2, 10):
        if is_prime(i):
            ans = (ans * (pow(2, count[i], MOD) - 1 + MOD)) % MOD

    return ans

# Example 1
N1 = 4
arr1 = [1, 2, 3, 4]
output1 = count_good_subsets(N1, arr1)
print(output1)  # Output: 6

# Example 2
N2 = 3
arr2 = [2, 2, 3]
output2 = count_good_subsets(N2, arr2)
print(output2)  # Output: 5
